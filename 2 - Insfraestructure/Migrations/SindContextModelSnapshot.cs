// <auto-generated />
using System;
using Infraestrutura;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestrutura.Migrations
{
    [DbContext(typeof(SindContext))]
    partial class SindContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.16");

            modelBuilder.Entity("Modelos.Associado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apelido")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Associados");
                });

            modelBuilder.Entity("Modelos.Contato", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssociadoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("AssociadoId")
                        .IsUnique();

                    b.ToTable("Contatos");
                });

            modelBuilder.Entity("Modelos.Documentos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssociadoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PIS")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RGid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("AssociadoId")
                        .IsUnique();

                    b.HasIndex("RGid");

                    b.ToTable("Documentos");
                });

            modelBuilder.Entity("Modelos.Endereco", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssociadoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CEP")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Municipio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Numero")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("AssociadoId")
                        .IsUnique();

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("Modelos.Escolaridade", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssociadoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Autodeclaracao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Formacao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("AssociadoId")
                        .IsUnique();

                    b.ToTable("Escolaridades");
                });

            modelBuilder.Entity("Modelos.Filiacao", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssociadoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CNPJEntidade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Filiado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomeEntidade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TipoEntidade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UFEntidade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("AssociadoId")
                        .IsUnique();

                    b.ToTable("Filiacoes");
                });

            modelBuilder.Entity("Modelos.Profissao", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AB")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Aposentado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AreaPesca")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("AssociadoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Empregado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FormaPesca")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LocalPesca")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeEmbarcacao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProdutoPesca")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RGP")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("AssociadoId")
                        .IsUnique();

                    b.ToTable("Profissoes");
                });

            modelBuilder.Entity("Modelos.RG", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssociadoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataEmisao")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nacionalidade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeMae")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NomePai")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OrgaoEmissor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("RG");
                });

            modelBuilder.Entity("Modelos.Contato", b =>
                {
                    b.HasOne("Modelos.Associado", null)
                        .WithOne("Contato")
                        .HasForeignKey("Modelos.Contato", "AssociadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modelos.Documentos", b =>
                {
                    b.HasOne("Modelos.Associado", null)
                        .WithOne("Documentos")
                        .HasForeignKey("Modelos.Documentos", "AssociadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modelos.RG", "RG")
                        .WithMany()
                        .HasForeignKey("RGid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RG");
                });

            modelBuilder.Entity("Modelos.Endereco", b =>
                {
                    b.HasOne("Modelos.Associado", null)
                        .WithOne("Endereco")
                        .HasForeignKey("Modelos.Endereco", "AssociadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modelos.Escolaridade", b =>
                {
                    b.HasOne("Modelos.Associado", null)
                        .WithOne("Escolaridade")
                        .HasForeignKey("Modelos.Escolaridade", "AssociadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modelos.Filiacao", b =>
                {
                    b.HasOne("Modelos.Associado", null)
                        .WithOne("Filiacao")
                        .HasForeignKey("Modelos.Filiacao", "AssociadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modelos.Profissao", b =>
                {
                    b.HasOne("Modelos.Associado", null)
                        .WithOne("Profissao")
                        .HasForeignKey("Modelos.Profissao", "AssociadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Modelos.Associado", b =>
                {
                    b.Navigation("Contato")
                        .IsRequired();

                    b.Navigation("Documentos")
                        .IsRequired();

                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("Escolaridade")
                        .IsRequired();

                    b.Navigation("Filiacao")
                        .IsRequired();

                    b.Navigation("Profissao")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
